!function(e){function t(t){for(var n,o,c=t[0],l=t[1],d=t[2],s=0,b=[];s<c.length;s++)o=c[s],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&b.push(a[o][0]),a[o]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(u&&u(t);b.length;)b.shift()();return i.push.apply(i,d||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,c=1;c<r.length;c++){var l=r[c];0!==a[l]&&(n=!1)}n&&(i.splice(t--,1),e=o(o.s=r[0]))}return e}var n={},a={0:0},i=[];function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var d=0;d<c.length;d++)t(c[d]);var u=l;i.push([165,1]),r()}({165:function(e,t,r){"use strict";r.r(t);var n=r(0),a=r.n(n),i=r(15),o=r.n(i),c=r(23),l=r(45),d=r(88),u=(r(103),r(46)),s=r(2);class b extends a.a.Component{constructor(e){super(e),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0}}componentDidCatch(e,t){}render(){return this.state.hasError?Object(s.d)("h1",null,"Something went wrong."):this.props.children}}function f(e,t,r,n,a,i,o){try{var c=e[i](o),l=c.value}catch(e){return void r(e)}c.done?t(l):Promise.resolve(l).then(n,a)}var p=e=>({type:"FETCH_WEATHER_FAILURE",payload:e}),h=e=>({type:"SELECT_WEATHER_ITEM",payload:e}),w=()=>function(){var e,t=(e=function*(e){try{e({type:"FETCH_WEATHER_BEGIN"});var t=yield fetch("http://api.openweathermap.org/data/2.5/forecast?id=".concat("2643743","&appid=").concat("416f21735638892910fc788dbd92dc24")),r=yield t.json();if(r.cod&&"200"!==r.cod)return e(p(r.message));e((e=>({type:"FETCH_WEATHER_SUCCESS",payload:e}))(r))}catch(t){console.error(t),e(p("Error fetching weather data. Please try again later"))}},function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function o(e){f(i,n,a,o,c,"next",e)}function c(e){f(i,n,a,o,c,"throw",e)}o(void 0)}))});return function(e){return t.apply(this,arguments)}}(),m=r(1),v=r.n(m),y=r(9),O=e=>(e-273.15).toFixed(1);function g(e){var{index:t}=e;return t<0?"headerRow":t%2==0?"evenRow":"oddRow"}var j=e=>{var{onSelect:t,weather:r}=e;return Object(s.d)(y.a,null,e=>{var{height:n,width:a}=e;return Object(s.d)(y.c,{width:Math.max(1570,a),height:n,headerHeight:40,rowHeight:30,rowCount:r.list.length,rowGetter:e=>{var{index:t}=e;return r.list[t]},rowClassName:g,onRowClick:t},Object(s.d)(y.b,{label:"Date",dataKey:"dt_txt",width:200,cellDataGetter:e=>{var{rowData:t}=e;return t.dt_txt.substr(0,16)},flexGrow:1}),Object(s.d)(y.b,{width:110,label:"Visibility",dataKey:"visibility",flexGrow:1}),Object(s.d)(y.b,{width:100,label:"Wind",dataKey:"wind",cellDataGetter:e=>{var{rowData:t}=e;return t.wind.speed+" / "+t.wind.deg},flexGrow:1}),Object(s.d)(y.b,{width:100,label:"Clouds",dataKey:"clouds",cellDataGetter:e=>{var{rowData:t}=e;return t.clouds.all},flexGrow:1}),Object(s.d)(y.b,{width:100,label:"Rain",dataKey:"rain",cellDataGetter:e=>{var{rowData:t}=e;return t.rain&&t.rain["3h"]},flexGrow:1}),Object(s.d)(y.b,{width:140,label:"Grnd Level",dataKey:"grnd_level",cellDataGetter:e=>{var{rowData:t}=e;return t.main.grnd_level},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Humidity",dataKey:"humidity",cellDataGetter:e=>{var{rowData:t}=e;return t.main.humidity+" %"},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Pressure",dataKey:"pressure",cellDataGetter:e=>{var{rowData:t}=e;return t.main.pressure},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Sea Level",dataKey:"sea_level",cellDataGetter:e=>{var{rowData:t}=e;return t.main.sea_level},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Feels like",dataKey:"feels_like",cellDataGetter:e=>{var{rowData:t}=e;return O(t.main.feels_like)},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Temp",dataKey:"temp",cellDataGetter:e=>{var{rowData:t}=e;return O(t.main.temp)},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Temp min",dataKey:"temp_min",cellDataGetter:e=>{var{rowData:t}=e;return O(t.main.temp_min)},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Temp max",dataKey:"temp_max",cellDataGetter:e=>{var{rowData:t}=e;return O(t.main.temp_max)},flexGrow:1}))})};j.propTypes={onSelect:v.a.func,weather:v.a.shape({list:v.a.arrayOf(v.a.shape({clouds:v.a.shape({all:v.a.number}),dt:v.a.number,dt_txt:v.a.string,visibility:v.a.number,weather:v.a.arrayOf(v.a.shape({id:v.a.number,main:v.a.string,description:v.a.string,icon:v.a.string})),wind:v.a.shape({speed:v.a.number,deg:v.a.number}),main:v.a.shape({feels_like:v.a.number,grnd_level:v.a.number,humidity:v.a.number,pressure:v.a.number,sea_level:v.a.number,temp:v.a.number,temp_kf:v.a.number,temp_max:v.a.number,temp_min:v.a.number}).isRequired}))}).isRequired};var _=j;function E(e){var{index:t}=e;return t<0?"headerRow":t%2==0?"evenRow":"oddRow"}var x=e=>{var{item:t}=e;return Object(s.d)(y.a,null,e=>{var{height:r,width:n}=e;return Object(s.d)(y.c,{width:Math.max(550,n),height:r,headerHeight:40,rowHeight:30,rowCount:t.weather.length,rowGetter:e=>{var{index:r}=e;return t.weather[r]},rowClassName:E},Object(s.d)(y.b,{label:"Main",dataKey:"main",width:150}),Object(s.d)(y.b,{width:200,label:"Description",dataKey:"description",flexGrow:1}),Object(s.d)(y.b,{width:200,label:"Icon",dataKey:"icon"}))})};x.propTypes={item:v.a.shape({weather:v.a.arrayOf(v.a.shape({id:v.a.number,main:v.a.string,description:v.a.string,icon:v.a.string}))}).isRequired};var D=x;function G(){var e=k(["\n  display: inline-block;\n  text-align: center;\n\n  min-width: 70px;\n  padding: 0.5em 1.125em;\n  margin-left: 2em;\n\n  background-color: #0087ff;\n  border-color: #0060ff;\n  color: #fff;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n  &:active {\n    background-color: #0060ff;\n  }\n"]);return G=function(){return e},e}function T(){var e=k(["\n  ","\n  color: red;\n"]);return T=function(){return e},e}function R(){var e=k(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  span {\n    display: inline-block;\n    max-width: 500px;\n  }\n"]);return R=function(){return e},e}function S(){var e=k(["\n  overflow: auto;\n  height: 100%;\n  padding: 2em;\n"]);return S=function(){return e},e}function C(){var e=k(["\n  padding: 1em 2em;\n  box-shadow: inset 0 -1px 0 #e1e4e8;\n"]);return C=function(){return e},e}function P(){var e=k(["\n  padding: calc(2em + 10px);\n  background-color: #fafbfc;\n  box-shadow: inset 0 -1px 0 #e1e4e8;\n"]);return P=function(){return e},e}function H(){var e=k(["\n  height: 80%;\n  width: 100%;\n"]);return H=function(){return e},e}function k(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var K=Object(s.c)(H()),A=Object(s.c)(P()),F=Object(s.c)(C()),I=Object(s.c)(S()),L=Object(s.c)(R()),M=Object(s.c)(T(),L),W=u.a.a(G()),N=Object(l.b)(e=>({weather:e.weather}))(e=>{var{dispatch:t,weather:r}=e,{loading:n,city:i,selected:o,error:c}=r;if(a.a.useEffect(()=>{t(w())},[]),n)return Object(s.d)("div",{css:L},Object(s.d)("span",null,"Loading weather data..."));if(c)return Object(s.d)("div",{css:M},Object(s.d)("span",null,c));return Object(s.d)("div",{css:K},Object(s.d)("div",{css:A},Object(s.d)("h2",null,i.name,", ",i.country)),o&&Object(s.d)("div",{css:F},o.dt_txt.substr(0,16)," ",Object(s.d)(W,{onClick:function(){t(h(null))}},"Return")),Object(s.d)("div",{css:I},o?Object(s.d)(D,{item:o}):Object(s.d)(_,{onSelect:function(e){t(h(e.rowData))},weather:r})))});function z(){var e=X(["\n  min-height: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n"]);return z=function(){return e},e}function U(){var e=X(["\n  html,\n  body,\n  #root {\n    height: 100%;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: Circular, Arial, sans-serif;\n    font-size: 18px;\n    color: var(--font-color);\n    background-color: var(--tertiary-color);\n    padding: 0;\n    margin: 0;\n  }\n\n  .evenRow {\n    background-color: #fff;\n  }\n  .oddRow {\n    background-color: #f0efef;\n  }\n"]);return U=function(){return e},e}function X(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var q=Object(s.c)(U()),B=u.a.div(z());function V(){return Object(s.d)(b,null,Object(s.d)(s.a,{styles:q}),Object(s.d)(B,null,Object(s.d)(N,null)))}function J(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Q(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?J(Object(r),!0).forEach((function(t){Y(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):J(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Z={city:{},list:[],loading:!1,error:null,selected:null};var $=Object(c.c)({weather:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Z,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"FETCH_WEATHER_BEGIN":return Q(Q({},e),{},{loading:!0,error:null});case"FETCH_WEATHER_SUCCESS":return Q(Q({},e),{},{loading:!1,city:t.payload.city,list:t.payload.list});case"FETCH_WEATHER_FAILURE":return Q(Q({},e),{},{loading:!1,error:t.payload,city:{},list:[]});case"SELECT_WEATHER_ITEM":return Q(Q({},e),{},{selected:t.payload});default:return e}}}),ee=Object(c.e)($,Object(c.d)(Object(c.a)(d.a),window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__():e=>e));o.a.render(a.a.createElement(l.a,{store:ee},a.a.createElement(V,null)),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,