!function(e){function t(t){for(var n,o,c=t[0],l=t[1],d=t[2],s=0,b=[];s<c.length;s++)o=c[s],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&b.push(a[o][0]),a[o]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(u&&u(t);b.length;)b.shift()();return i.push.apply(i,d||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,c=1;c<r.length;c++){var l=r[c];0!==a[l]&&(n=!1)}n&&(i.splice(t--,1),e=o(o.s=r[0]))}return e}var n={},a={0:0},i=[];function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var d=0;d<c.length;d++)t(c[d]);var u=l;i.push([165,1]),r()}({165:function(e,t,r){"use strict";r.r(t);var n=r(0),a=r.n(n),i=r(15),o=r.n(i),c=r(23),l=r(45),d=r(88),u=(r(103),r(46)),s=r(2);class b extends a.a.Component{constructor(e){super(e),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0}}componentDidCatch(e,t){}render(){return this.state.hasError?Object(s.d)("h1",null,"Something went wrong."):this.props.children}}function f(e,t,r,n,a,i,o){try{var c=e[i](o),l=c.value}catch(e){return void r(e)}c.done?t(l):Promise.resolve(l).then(n,a)}var p=e=>({type:"FETCH_WEATHER_FAILURE",payload:e}),h=e=>({type:"SELECT_WEATHER_ITEM",payload:e}),w=()=>function(){var e,t=(e=function*(e){try{e({type:"FETCH_WEATHER_BEGIN"});var t=yield fetch("http://api.openweathermap.org/data/2.5/forecast?id=".concat("2643743","&appid=").concat("416f21735638892910fc788dbd92dc24")),r=yield t.json();if(r.cod&&"200"!==r.cod)return e(p(r.message));e((e=>({type:"FETCH_WEATHER_SUCCESS",payload:e}))(r))}catch(t){console.error(t),e(p("Error fetching weather data. Please try again later"))}},function(){var t=this,r=arguments;return new Promise((function(n,a){var i=e.apply(t,r);function o(e){f(i,n,a,o,c,"next",e)}function c(e){f(i,n,a,o,c,"throw",e)}o(void 0)}))});return function(e){return t.apply(this,arguments)}}(),m=r(1),v=r.n(m),y=r(9),O=e=>(e-273.15).toFixed(1);function g(e){var{index:t}=e;return t<0?"headerRow":t%2==0?"evenRow":"oddRow"}var j=e=>{var{onSelect:t,weather:r}=e;return Object(s.d)(y.a,null,e=>{var{height:n,width:a}=e;return Object(s.d)(y.c,{width:Math.max(1570,a),height:n,headerHeight:40,rowHeight:30,rowCount:r.list.length,rowGetter:e=>{var{index:t}=e;return r.list[t]},rowClassName:g,onRowClick:t},Object(s.d)(y.b,{label:"Date",dataKey:"dt_txt",width:200,cellDataGetter:e=>{var{rowData:t}=e;return t.dt_txt.substr(0,16)},flexGrow:1}),Object(s.d)(y.b,{width:110,label:"Visibility",dataKey:"visibility",flexGrow:1}),Object(s.d)(y.b,{width:100,label:"Wind",dataKey:"wind",cellDataGetter:e=>{var{rowData:t}=e;return t.wind.speed+" / "+t.wind.deg},flexGrow:1}),Object(s.d)(y.b,{width:100,label:"Clouds",dataKey:"clouds",cellDataGetter:e=>{var{rowData:t}=e;return t.clouds.all},flexGrow:1}),Object(s.d)(y.b,{width:100,label:"Rain",dataKey:"rain",cellDataGetter:e=>{var{rowData:t}=e;return t.rain&&t.rain["3h"]},flexGrow:1}),Object(s.d)(y.b,{width:140,label:"Grnd Level",dataKey:"grnd_level",cellDataGetter:e=>{var{rowData:t}=e;return t.main.grnd_level},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Humidity",dataKey:"humidity",cellDataGetter:e=>{var{rowData:t}=e;return t.main.humidity+" %"},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Pressure",dataKey:"pressure",cellDataGetter:e=>{var{rowData:t}=e;return t.main.pressure},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Sea Level",dataKey:"sea_level",cellDataGetter:e=>{var{rowData:t}=e;return t.main.sea_level},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Feels like",dataKey:"feels_like",cellDataGetter:e=>{var{rowData:t}=e;return O(t.main.feels_like)},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Temp",dataKey:"temp",cellDataGetter:e=>{var{rowData:t}=e;return O(t.main.temp)},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Temp min",dataKey:"temp_min",cellDataGetter:e=>{var{rowData:t}=e;return O(t.main.temp_min)},flexGrow:1}),Object(s.d)(y.b,{width:120,label:"Temp max",dataKey:"temp_max",cellDataGetter:e=>{var{rowData:t}=e;return O(t.main.temp_max)},flexGrow:1}))})};j.propTypes={onSelect:v.a.func,weather:v.a.shape({list:v.a.arrayOf(v.a.shape({clouds:v.a.shape({all:v.a.number}),dt:v.a.number,dt_txt:v.a.string,visibility:v.a.number,weather:v.a.arrayOf(v.a.shape({id:v.a.number,main:v.a.string,description:v.a.string,icon:v.a.string})),wind:v.a.shape({speed:v.a.number,deg:v.a.number}),main:v.a.shape({feels_like:v.a.number,grnd_level:v.a.number,humidity:v.a.number,pressure:v.a.number,sea_level:v.a.number,temp:v.a.number,temp_kf:v.a.number,temp_max:v.a.number,temp_min:v.a.number}).isRequired}))}).isRequired};var x=j;function E(e){var{index:t}=e;return t<0?"headerRow":t%2==0?"evenRow":"oddRow"}var _=e=>{var{item:t}=e;return Object(s.d)(y.a,null,e=>{var{height:r,width:n}=e;return Object(s.d)(y.c,{width:Math.max(550,n),height:r,headerHeight:40,rowHeight:30,rowCount:t.weather.length,rowGetter:e=>{var{index:r}=e;return t.weather[r]},rowClassName:E},Object(s.d)(y.b,{label:"Main",dataKey:"main",width:150}),Object(s.d)(y.b,{width:200,label:"Description",dataKey:"description",flexGrow:1}),Object(s.d)(y.b,{width:200,label:"Icon",dataKey:"icon"}))})};_.propTypes={item:v.a.shape({weather:v.a.arrayOf(v.a.shape({id:v.a.number,main:v.a.string,description:v.a.string,icon:v.a.string}))}).isRequired};var D=_;function G(){var e=k(["\n  display: inline-block;\n  text-align: center;\n\n  min-width: 70px;\n  padding: 0.5em 1.125em;\n  margin-left: 2em;\n\n  background-color: #0087ff;\n  border-color: #0060ff;\n  color: #fff;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n  &:active {\n    background-color: #0060ff;\n  }\n"]);return G=function(){return e},e}function T(){var e=k(["\n  ","\n  color: red;\n"]);return T=function(){return e},e}function R(){var e=k(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  span {\n    display: inline-block;\n    max-width: 500px;\n  }\n"]);return R=function(){return e},e}function C(){var e=k(["\n  overflow: auto;\n  height: 100%;\n  padding: 2em;\n"]);return C=function(){return e},e}function P(){var e=k(["\n  padding: 1em 2em;\n  box-shadow: inset 0 -1px 0 #e1e4e8;\n"]);return P=function(){return e},e}function S(){var e=k(["\n  padding: calc(2em + 10px);\n  background-color: #fafbfc;\n  box-shadow: inset 0 -1px 0 #e1e4e8;\n"]);return S=function(){return e},e}function H(){var e=k(["\n  height: 80%;\n  width: 100%;\n"]);return H=function(){return e},e}function k(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var K=Object(s.c)(H()),A=Object(s.c)(S()),F=Object(s.c)(P()),M=Object(s.c)(C()),W=Object(s.c)(R()),I=Object(s.c)(T(),W),L=u.a.a(G()),z=Object(l.b)(e=>({weather:e.weather}))(e=>{var{dispatch:t,weather:r}=e,{loading:n,city:i,selected:o,error:c}=r;if(a.a.useEffect(()=>{t(w())},[]),n)return Object(s.d)("div",{css:W},Object(s.d)("span",null,"Loading weather data..."));if(c)return Object(s.d)("div",{css:I},Object(s.d)("span",null,c));return Object(s.d)("div",{css:K},Object(s.d)("div",{css:A},Object(s.d)("h2",null,i.name,", ",i.country)),o&&Object(s.d)("div",{css:F},o.dt_txt.substr(0,16)," ",Object(s.d)(L,{onClick:function(){t(h(null))}},"Return")),Object(s.d)("div",{css:M},o?Object(s.d)(D,{item:o}):Object(s.d)(x,{onSelect:function(e){t(h(e.rowData))},weather:r})))});function N(){var e=q(["\n  min-height: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n"]);return N=function(){return e},e}function U(){var e=q(["\n  html,\n  body,\n  #root {\n    height: 100%;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: Circular, Arial, sans-serif;\n    font-size: 18px;\n    color: var(--font-color);\n    background-color: var(--tertiary-color);\n    padding: 0;\n    margin: 0;\n  }\n\n  .evenRow {\n    background-color: #fff;\n  }\n  .oddRow {\n    background-color: #f0efef;\n  }\n"]);return U=function(){return e},e}function q(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var B=Object(s.c)(U()),J=u.a.div(N());function V(){return Object(s.d)(b,null,Object(s.d)(s.a,{styles:B}),Object(s.d)(J,null,Object(s.d)(z,null)))}function Q(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function X(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Q(Object(r),!0).forEach((function(t){Y(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Q(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Z={city:{},list:[],loading:!1,error:null,selected:null};var $=Object(c.c)({weather:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Z,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"FETCH_WEATHER_BEGIN":return X(X({},e),{},{loading:!0,error:null});case"FETCH_WEATHER_SUCCESS":return X(X({},e),{},{loading:!1,city:t.payload.city,list:t.payload.list});case"FETCH_WEATHER_FAILURE":return X(X({},e),{},{loading:!1,error:t.payload,city:{},list:[]});case"SELECT_WEATHER_ITEM":return X(X({},e),{},{selected:t.payload});default:return e}}}),ee=Object(c.e)($,Object(c.d)(Object(c.a)(d.a),e=>e));o.a.render(a.a.createElement(l.a,{store:ee},a.a.createElement(V,null)),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRXJyb3JCb3VuZGFyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy93ZWF0aGVyLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9jb252ZXJzaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9XZWF0aGVyVmlldy9XZWF0aGVyVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvV2VhdGhlclZpZXcvV2VhdGhlckl0ZW1UYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9XZWF0aGVyVmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy93ZWF0aGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIwIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJFcnJvckJvdW5kYXJ5IiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3VwZXIiLCJ0aGlzIiwic3RhdGUiLCJoYXNFcnJvciIsImVycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJlcnJvckluZm8iLCJyZW5kZXIiLCJjaGlsZHJlbiIsImZldGNoV2VhdGhlckZhaWx1cmUiLCJlcnJvck1lc3NhZ2UiLCJ0eXBlIiwicGF5bG9hZCIsInNlbGVjdFdlYXRoZXJJdGVtIiwiaXRlbSIsImZldGNoV2VhdGhlciIsImRpc3BhdGNoIiwicmVzcG9uc2UiLCJmZXRjaCIsImpzb24iLCJjb2QiLCJtZXNzYWdlIiwiZmV0Y2hXZWF0aGVyU3VjY2VzcyIsImVyciIsImNvbnNvbGUiLCJrZWx2aW5Ub0NlbHNpdXMiLCJrZWx2aW4iLCJ0b0ZpeGVkIiwicm93Q2xhc3NOYW1lIiwiaW5kZXgiLCJXZWF0aGVyVGFibGUiLCJvblNlbGVjdCIsIndlYXRoZXIiLCJoZWlnaHQiLCJ3aWR0aCIsIk1hdGgiLCJtYXgiLCJoZWFkZXJIZWlnaHQiLCJyb3dIZWlnaHQiLCJyb3dDb3VudCIsImxpc3QiLCJyb3dHZXR0ZXIiLCJvblJvd0NsaWNrIiwibGFiZWwiLCJkYXRhS2V5IiwiY2VsbERhdGFHZXR0ZXIiLCJyb3dEYXRhIiwiZHRfdHh0Iiwic3Vic3RyIiwiZmxleEdyb3ciLCJ3aW5kIiwic3BlZWQiLCJkZWciLCJjbG91ZHMiLCJhbGwiLCJyYWluIiwibWFpbiIsImdybmRfbGV2ZWwiLCJodW1pZGl0eSIsInByZXNzdXJlIiwic2VhX2xldmVsIiwiZmVlbHNfbGlrZSIsInRlbXAiLCJ0ZW1wX21pbiIsInRlbXBfbWF4IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZnVuYyIsInNoYXBlIiwiYXJyYXlPZiIsIm51bWJlciIsImR0Iiwic3RyaW5nIiwidmlzaWJpbGl0eSIsImlkIiwiZGVzY3JpcHRpb24iLCJpY29uIiwidGVtcF9rZiIsImlzUmVxdWlyZWQiLCJXZWF0aGVySXRlbVRhYmxlIiwiY29udGFpbmVyIiwiY3NzIiwiaGVhZGVyIiwic3ViaGVhZGVyIiwidGFibGUiLCJsb2FkaW5nU3R5bGVzIiwiZXJyb3JTdHlsZXMiLCJCdXR0b24iLCJzdHlsZWQiLCJhIiwiY29ubmVjdCIsImxvYWRpbmciLCJjaXR5Iiwic2VsZWN0ZWQiLCJ1c2VFZmZlY3QiLCJjb3VudHJ5Iiwib25DbGljayIsImV2ZW50IiwiZ2xvYmFsU3R5bGVzIiwiQXBwV3JhcHBlciIsImRpdiIsIkFwcCIsInN0eWxlcyIsImluaXRpYWxTdGF0ZSIsImNvbWJpbmVSZWR1Y2VycyIsImFjdGlvbiIsInN0b3JlIiwiY3JlYXRlU3RvcmUiLCJyb290UmVkdWNlciIsImNvbXBvc2UiLCJhcHBseU1pZGRsZXdhcmUiLCJ0aHVuayIsIm5vb3AiLCJSZWFjdERPTSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNFLFNBQVNBLEVBQXFCQyxHQVE3QixJQVBBLElBTUlDLEVBQVVDLEVBTlZDLEVBQVdILEVBQUssR0FDaEJJLEVBQWNKLEVBQUssR0FDbkJLLEVBQWlCTCxFQUFLLEdBSUhNLEVBQUksRUFBR0MsRUFBVyxHQUNwQ0QsRUFBSUgsRUFBU0ssT0FBUUYsSUFDekJKLEVBQVVDLEVBQVNHLEdBQ2hCRyxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLQyxFQUFpQlgsSUFBWVcsRUFBZ0JYLElBQ3BGSyxFQUFTTyxLQUFLRCxFQUFnQlgsR0FBUyxJQUV4Q1csRUFBZ0JYLEdBQVcsRUFFNUIsSUFB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QUQsQ0FBVW1HLE1BQU9BLElBQ2Ysa0JBQUNMLEVBQUQsT0FFRmEsU0FBU0MsZUFBZSIsImZpbGUiOiJtYWluLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMTY1LDFdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiLyoqIEBqc3gganN4ICovXG5pbXBvcnQge2pzeCwgY3NzfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge2hhc0Vycm9yOiBmYWxzZX1cbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICAvLyBVcGRhdGUgc3RhdGUgc28gdGhlIG5leHQgcmVuZGVyIHdpbGwgc2hvdyB0aGUgZmFsbGJhY2sgVUkuXG4gICAgcmV0dXJuIHtoYXNFcnJvcjogdHJ1ZX1cbiAgfVxuXG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICAvLyBZb3UgY2FuIGFsc28gbG9nIHRoZSBlcnJvciB0byBhbiBlcnJvciByZXBvcnRpbmcgc2VydmljZVxuICAgIC8vIGxvZ0Vycm9yVG9NeVNlcnZpY2UoZXJyb3IsIGVycm9ySW5mbylcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5oYXNFcnJvcikge1xuICAgICAgcmV0dXJuIDxoMT5Tb21ldGhpbmcgd2VudCB3cm9uZy48L2gxPlxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gIH1cbn1cbiIsImltcG9ydCB3ZWF0aGVyRml4dHVyZSBmcm9tICcuLi9maXh0dXJlcy93ZWF0aGVyRml4dHVyZSdcblxuZXhwb3J0IGNvbnN0IEZFVENIX1dFQVRIRVJfQkVHSU4gPSAnRkVUQ0hfV0VBVEhFUl9CRUdJTidcbmV4cG9ydCBjb25zdCBGRVRDSF9XRUFUSEVSX1NVQ0NFU1MgPSAnRkVUQ0hfV0VBVEhFUl9TVUNDRVNTJ1xuZXhwb3J0IGNvbnN0IEZFVENIX1dFQVRIRVJfRkFJTFVSRSA9ICdGRVRDSF9XRUFUSEVSX0ZBSUxVUkUnXG5leHBvcnQgY29uc3QgU0VMRUNUX1dFQVRIRVJfSVRFTSA9ICdTRUxFQ1RfV0VBVEhFUl9JVEVNJ1xuXG5leHBvcnQgY29uc3QgT1BFTl9XRUFUSEVSX0lEID0gJzI2NDM3NDMnXG5leHBvcnQgY29uc3QgT1BFTl9XRUFUSEVSX0FQUF9JRCA9ICc0MTZmMjE3MzU2Mzg4OTI5MTBmYzc4OGRiZDkyZGMyNCdcblxuZXhwb3J0IGNvbnN0IGZldGNoV2VhdGhlckJlZ2luID0gKCkgPT4gKHtcbiAgdHlwZTogRkVUQ0hfV0VBVEhFUl9CRUdJTixcbn0pXG5cbmV4cG9ydCBjb25zdCBmZXRjaFdlYXRoZXJTdWNjZXNzID0gKGRhdGEpID0+ICh7XG4gIHR5cGU6IEZFVENIX1dFQVRIRVJfU1VDQ0VTUyxcbiAgcGF5bG9hZDogZGF0YSxcbn0pXG5cbmV4cG9ydCBjb25zdCBmZXRjaFdlYXRoZXJGYWlsdXJlID0gKGVycm9yTWVzc2FnZSkgPT4gKHtcbiAgdHlwZTogRkVUQ0hfV0VBVEhFUl9GQUlMVVJFLFxuICBwYXlsb2FkOiBlcnJvck1lc3NhZ2UsXG59KVxuXG5leHBvcnQgY29uc3Qgc2VsZWN0V2VhdGhlckl0ZW0gPSAoaXRlbSkgPT4gKHtcbiAgdHlwZTogU0VMRUNUX1dFQVRIRVJfSVRFTSxcbiAgcGF5bG9hZDogaXRlbSxcbn0pXG5cbmV4cG9ydCBjb25zdCBmZXRjaFdlYXRoZXIgPSAoKSA9PiB7XG4gIHJldHVybiBhc3luYyAoZGlzcGF0Y2gpID0+IHtcbiAgICB0cnkge1xuICAgICAgZGlzcGF0Y2goZmV0Y2hXZWF0aGVyQmVnaW4oKSlcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICAgIGBodHRwOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9mb3JlY2FzdD9pZD0ke09QRU5fV0VBVEhFUl9JRH0mYXBwaWQ9JHtPUEVOX1dFQVRIRVJfQVBQX0lEfWAsXG4gICAgICApXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgICBpZiAoZGF0YS5jb2QgJiYgZGF0YS5jb2QgIT09ICcyMDAnKSB7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaChmZXRjaFdlYXRoZXJGYWlsdXJlKGRhdGEubWVzc2FnZSkpXG4gICAgICB9XG4gICAgICBkaXNwYXRjaChmZXRjaFdlYXRoZXJTdWNjZXNzKGRhdGEpKVxuICAgICAgLy9kaXNwYXRjaChmZXRjaFdlYXRoZXJTdWNjZXNzKHdlYXRoZXJGaXh0dXJlKSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgICAgZGlzcGF0Y2goZmV0Y2hXZWF0aGVyRmFpbHVyZSgnRXJyb3IgZmV0Y2hpbmcgd2VhdGhlciBkYXRhLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyJykpXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgY29uc3Qga2VsdmluVG9DZWxzaXVzID0gKGtlbHZpbikgPT4gKGtlbHZpbiAtIDI3My4xNSkudG9GaXhlZCgxKVxuIiwiLyoqIEBqc3gganN4ICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7Y3NzLCBqc3h9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5pbXBvcnQge0F1dG9TaXplciwgVGFibGUsIENvbHVtbn0gZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQnXG5cbmltcG9ydCB7a2VsdmluVG9DZWxzaXVzfSBmcm9tICcuLi8uLi91dGlscy9jb252ZXJzaW9ucydcblxuZnVuY3Rpb24gcm93Q2xhc3NOYW1lKHtpbmRleH0pIHtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiAnaGVhZGVyUm93J1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbmRleCAlIDIgPT09IDAgPyAnZXZlblJvdycgOiAnb2RkUm93J1xuICB9XG59XG5cbmNvbnN0IFdlYXRoZXJUYWJsZSA9ICh7b25TZWxlY3QsIHdlYXRoZXJ9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEF1dG9TaXplcj5cbiAgICAgIHsoe2hlaWdodCwgd2lkdGh9KSA9PiAoXG4gICAgICAgIDxUYWJsZVxuICAgICAgICAgIHdpZHRoPXtNYXRoLm1heCgxNTcwLCB3aWR0aCl9XG4gICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgICAgaGVhZGVySGVpZ2h0PXs0MH1cbiAgICAgICAgICByb3dIZWlnaHQ9ezMwfVxuICAgICAgICAgIHJvd0NvdW50PXt3ZWF0aGVyLmxpc3QubGVuZ3RofVxuICAgICAgICAgIHJvd0dldHRlcj17KHtpbmRleH0pID0+IHdlYXRoZXIubGlzdFtpbmRleF19XG4gICAgICAgICAgcm93Q2xhc3NOYW1lPXtyb3dDbGFzc05hbWV9XG4gICAgICAgICAgb25Sb3dDbGljaz17b25TZWxlY3R9PlxuICAgICAgICAgIDxDb2x1bW5cbiAgICAgICAgICAgIGxhYmVsPVwiRGF0ZVwiXG4gICAgICAgICAgICBkYXRhS2V5PVwiZHRfdHh0XCJcbiAgICAgICAgICAgIHdpZHRoPXsyMDB9XG4gICAgICAgICAgICBjZWxsRGF0YUdldHRlcj17KHtyb3dEYXRhfSkgPT4gcm93RGF0YS5kdF90eHQuc3Vic3RyKDAsIDE2KX1cbiAgICAgICAgICAgIGZsZXhHcm93PXsxfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPENvbHVtbiB3aWR0aD17MTEwfSBsYWJlbD1cIlZpc2liaWxpdHlcIiBkYXRhS2V5PVwidmlzaWJpbGl0eVwiIGZsZXhHcm93PXsxfSAvPlxuICAgICAgICAgIDxDb2x1bW5cbiAgICAgICAgICAgIHdpZHRoPXsxMDB9XG4gICAgICAgICAgICBsYWJlbD1cIldpbmRcIlxuICAgICAgICAgICAgZGF0YUtleT1cIndpbmRcIlxuICAgICAgICAgICAgY2VsbERhdGFHZXR0ZXI9eyh7cm93RGF0YX0pID0+IHJvd0RhdGEud2luZC5zcGVlZCArICcgLyAnICsgcm93RGF0YS53aW5kLmRlZ31cbiAgICAgICAgICAgIGZsZXhHcm93PXsxfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPENvbHVtblxuICAgICAgICAgICAgd2lkdGg9ezEwMH1cbiAgICAgICAgICAgIGxhYmVsPVwiQ2xvdWRzXCJcbiAgICAgICAgICAgIGRhdGFLZXk9XCJjbG91ZHNcIlxuICAgICAgICAgICAgY2VsbERhdGFHZXR0ZXI9eyh7cm93RGF0YX0pID0+IHJvd0RhdGEuY2xvdWRzLmFsbH1cbiAgICAgICAgICAgIGZsZXhHcm93PXsxfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPENvbHVtblxuICAgICAgICAgICAgd2lkdGg9ezEwMH1cbiAgICAgICAgICAgIGxhYmVsPVwiUmFpblwiXG4gICAgICAgICAgICBkYXRhS2V5PVwicmFpblwiXG4gICAgICAgICAgICBjZWxsRGF0YUdldHRlcj17KHtyb3dEYXRhfSkgPT4gcm93RGF0YS5yYWluICYmIHJvd0RhdGEucmFpblsnM2gnXX1cbiAgICAgICAgICAgIGZsZXhHcm93PXsxfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPENvbHVtblxuICAgICAgICAgICAgd2lkdGg9ezE0MH1cbiAgICAgICAgICAgIGxhYmVsPVwiR3JuZCBMZXZlbFwiXG4gICAgICAgICAgICBkYXRhS2V5PVwiZ3JuZF9sZXZlbFwiXG4gICAgICAgICAgICBjZWxsRGF0YUdldHRlcj17KHtyb3dEYXRhfSkgPT4gcm93RGF0YS5tYWluLmdybmRfbGV2ZWx9XG4gICAgICAgICAgICBmbGV4R3Jvdz17MX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxDb2x1bW5cbiAgICAgICAgICAgIHdpZHRoPXsxMjB9XG4gICAgICAgICAgICBsYWJlbD1cIkh1bWlkaXR5XCJcbiAgICAgICAgICAgIGRhdGFLZXk9XCJodW1pZGl0eVwiXG4gICAgICAgICAgICBjZWxsRGF0YUdldHRlcj17KHtyb3dEYXRhfSkgPT4gcm93RGF0YS5tYWluLmh1bWlkaXR5ICsgJyAlJ31cbiAgICAgICAgICAgIGZsZXhHcm93PXsxfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPENvbHVtblxuICAgICAgICAgICAgd2lkdGg9ezEyMH1cbiAgICAgICAgICAgIGxhYmVsPVwiUHJlc3N1cmVcIlxuICAgICAgICAgICAgZGF0YUtleT1cInByZXNzdXJlXCJcbiAgICAgICAgICAgIGNlbGxEYXRhR2V0dGVyPXsoe3Jvd0RhdGF9KSA9PiByb3dEYXRhLm1haW4ucHJlc3N1cmV9XG4gICAgICAgICAgICBmbGV4R3Jvdz17MX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxDb2x1bW5cbiAgICAgICAgICAgIHdpZHRoPXsxMjB9XG4gICAgICAgICAgICBsYWJlbD1cIlNlYSBMZXZlbFwiXG4gICAgICAgICAgICBkYXRhS2V5PVwic2VhX2xldmVsXCJcbiAgICAgICAgICAgIGNlbGxEYXRhR2V0dGVyPXsoe3Jvd0RhdGF9KSA9PiByb3dEYXRhLm1haW4uc2VhX2xldmVsfVxuICAgICAgICAgICAgZmxleEdyb3c9ezF9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8Q29sdW1uXG4gICAgICAgICAgICB3aWR0aD17MTIwfVxuICAgICAgICAgICAgbGFiZWw9XCJGZWVscyBsaWtlXCJcbiAgICAgICAgICAgIGRhdGFLZXk9XCJmZWVsc19saWtlXCJcbiAgICAgICAgICAgIGNlbGxEYXRhR2V0dGVyPXsoe3Jvd0RhdGF9KSA9PiBrZWx2aW5Ub0NlbHNpdXMocm93RGF0YS5tYWluLmZlZWxzX2xpa2UpfVxuICAgICAgICAgICAgZmxleEdyb3c9ezF9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8Q29sdW1uXG4gICAgICAgICAgICB3aWR0aD17MTIwfVxuICAgICAgICAgICAgbGFiZWw9XCJUZW1wXCJcbiAgICAgICAgICAgIGRhdGFLZXk9XCJ0ZW1wXCJcbiAgICAgICAgICAgIGNlbGxEYXRhR2V0dGVyPXsoe3Jvd0RhdGF9KSA9PiBrZWx2aW5Ub0NlbHNpdXMocm93RGF0YS5tYWluLnRlbXApfVxuICAgICAgICAgICAgZmxleEdyb3c9ezF9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8Q29sdW1uXG4gICAgICAgICAgICB3aWR0aD17MTIwfVxuICAgICAgICAgICAgbGFiZWw9XCJUZW1wIG1pblwiXG4gICAgICAgICAgICBkYXRhS2V5PVwidGVtcF9taW5cIlxuICAgICAgICAgICAgY2VsbERhdGFHZXR0ZXI9eyh7cm93RGF0YX0pID0+IGtlbHZpblRvQ2Vsc2l1cyhyb3dEYXRhLm1haW4udGVtcF9taW4pfVxuICAgICAgICAgICAgZmxleEdyb3c9ezF9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8Q29sdW1uXG4gICAgICAgICAgICB3aWR0aD17MTIwfVxuICAgICAgICAgICAgbGFiZWw9XCJUZW1wIG1heFwiXG4gICAgICAgICAgICBkYXRhS2V5PVwidGVtcF9tYXhcIlxuICAgICAgICAgICAgY2VsbERhdGFHZXR0ZXI9eyh7cm93RGF0YX0pID0+IGtlbHZpblRvQ2Vsc2l1cyhyb3dEYXRhLm1haW4udGVtcF9tYXgpfVxuICAgICAgICAgICAgZmxleEdyb3c9ezF9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9UYWJsZT5cbiAgICAgICl9XG4gICAgPC9BdXRvU2l6ZXI+XG4gIClcbn1cblxuV2VhdGhlclRhYmxlLnByb3BUeXBlcyA9IHtcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICB3ZWF0aGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxpc3Q6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgY2xvdWRzOiBQcm9wVHlwZXMuc2hhcGUoe2FsbDogUHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgICBkdDogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgZHRfdHh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB2aXNpYmlsaXR5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICB3ZWF0aGVyOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgaWQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgICAgICBtYWluOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgIH0pLFxuICAgICAgICApLFxuICAgICAgICB3aW5kOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIHNwZWVkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICAgIGRlZzogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgfSksXG4gICAgICAgIG1haW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgZmVlbHNfbGlrZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgICBncm5kX2xldmVsOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICAgIGh1bWlkaXR5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICAgIHByZXNzdXJlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICAgIHNlYV9sZXZlbDogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgICB0ZW1wOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICAgIHRlbXBfa2Y6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgICAgdGVtcF9tYXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgICAgdGVtcF9taW46IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgICB9KSxcbiAgICApLFxuICB9KS5pc1JlcXVpcmVkLFxufVxuXG5leHBvcnQgZGVmYXVsdCBXZWF0aGVyVGFibGVcbiIsIi8qKiBAanN4IGpzeCAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge2NzcywganN4fSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHtBdXRvU2l6ZXIsIFRhYmxlLCBDb2x1bW59IGZyb20gJ3JlYWN0LXZpcnR1YWxpemVkJ1xuXG5mdW5jdGlvbiByb3dDbGFzc05hbWUoe2luZGV4fSkge1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuICdoZWFkZXJSb3cnXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGluZGV4ICUgMiA9PT0gMCA/ICdldmVuUm93JyA6ICdvZGRSb3cnXG4gIH1cbn1cblxuY29uc3QgV2VhdGhlckl0ZW1UYWJsZSA9ICh7aXRlbX0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8QXV0b1NpemVyPlxuICAgICAgeyh7aGVpZ2h0LCB3aWR0aH0pID0+IChcbiAgICAgICAgPFRhYmxlXG4gICAgICAgICAgd2lkdGg9e01hdGgubWF4KDU1MCwgd2lkdGgpfVxuICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgIGhlYWRlckhlaWdodD17NDB9XG4gICAgICAgICAgcm93SGVpZ2h0PXszMH1cbiAgICAgICAgICByb3dDb3VudD17aXRlbS53ZWF0aGVyLmxlbmd0aH1cbiAgICAgICAgICByb3dHZXR0ZXI9eyh7aW5kZXh9KSA9PiBpdGVtLndlYXRoZXJbaW5kZXhdfVxuICAgICAgICAgIHJvd0NsYXNzTmFtZT17cm93Q2xhc3NOYW1lfT5cbiAgICAgICAgICA8Q29sdW1uIGxhYmVsPVwiTWFpblwiIGRhdGFLZXk9XCJtYWluXCIgd2lkdGg9ezE1MH0gLz5cbiAgICAgICAgICA8Q29sdW1uIHdpZHRoPXsyMDB9IGxhYmVsPVwiRGVzY3JpcHRpb25cIiBkYXRhS2V5PVwiZGVzY3JpcHRpb25cIiBmbGV4R3Jvdz17MX0gLz5cbiAgICAgICAgICA8Q29sdW1uIHdpZHRoPXsyMDB9IGxhYmVsPVwiSWNvblwiIGRhdGFLZXk9XCJpY29uXCIgLz5cbiAgICAgICAgPC9UYWJsZT5cbiAgICAgICl9XG4gICAgPC9BdXRvU2l6ZXI+XG4gIClcbn1cblxuV2VhdGhlckl0ZW1UYWJsZS5wcm9wVHlwZXMgPSB7XG4gIGl0ZW06IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgd2VhdGhlcjogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBpZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgbWFpbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB9KSxcbiAgICApLFxuICB9KS5pc1JlcXVpcmVkLFxufVxuXG5leHBvcnQgZGVmYXVsdCBXZWF0aGVySXRlbVRhYmxlXG4iLCIvKiogQGpzeCBqc3ggKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7Y3NzLCBqc3h9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcblxuaW1wb3J0IHtmZXRjaFdlYXRoZXIsIHNlbGVjdFdlYXRoZXJJdGVtfSBmcm9tICcuLi8uLi9hY3Rpb25zL3dlYXRoZXInXG5pbXBvcnQgV2VhdGhlclRhYmxlIGZyb20gJy4vV2VhdGhlclRhYmxlJ1xuaW1wb3J0IFdlYXRoZXJJdGVtVGFibGUgZnJvbSAnLi9XZWF0aGVySXRlbVRhYmxlJ1xuXG5jb25zdCBjb250YWluZXIgPSBjc3NgXG4gIGhlaWdodDogODAlO1xuICB3aWR0aDogMTAwJTtcbmBcblxuY29uc3QgaGVhZGVyID0gY3NzYFxuICBwYWRkaW5nOiBjYWxjKDJlbSArIDEwcHgpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYmZjO1xuICBib3gtc2hhZG93OiBpbnNldCAwIC0xcHggMCAjZTFlNGU4O1xuYFxuXG5jb25zdCBzdWJoZWFkZXIgPSBjc3NgXG4gIHBhZGRpbmc6IDFlbSAyZW07XG4gIGJveC1zaGFkb3c6IGluc2V0IDAgLTFweCAwICNlMWU0ZTg7XG5gXG5cbmNvbnN0IHRhYmxlID0gY3NzYFxuICBvdmVyZmxvdzogYXV0bztcbiAgaGVpZ2h0OiAxMDAlO1xuICBwYWRkaW5nOiAyZW07XG5gXG5cbmNvbnN0IGxvYWRpbmdTdHlsZXMgPSBjc3NgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBzcGFuIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgfVxuYFxuXG5jb25zdCBlcnJvclN0eWxlcyA9IGNzc2BcbiAgJHtsb2FkaW5nU3R5bGVzfVxuICBjb2xvcjogcmVkO1xuYFxuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQuYWBcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgbWluLXdpZHRoOiA3MHB4O1xuICBwYWRkaW5nOiAwLjVlbSAxLjEyNWVtO1xuICBtYXJnaW4tbGVmdDogMmVtO1xuXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDg3ZmY7XG4gIGJvcmRlci1jb2xvcjogIzAwNjBmZjtcbiAgY29sb3I6ICNmZmY7XG4gIGN1cnNvcjogcG9pbnRlcjtcblxuICAmOmZvY3VzIHtcbiAgICBvdXRsaW5lOiBub25lO1xuICB9XG4gICY6YWN0aXZlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2MGZmO1xuICB9XG5gXG5cbmNvbnN0IFdlYXRoZXJWaWV3ID0gKHtkaXNwYXRjaCwgd2VhdGhlcn0pID0+IHtcbiAgY29uc3Qge2xvYWRpbmcsIGNpdHksIHNlbGVjdGVkLCBlcnJvcn0gPSB3ZWF0aGVyXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBkaXNwYXRjaChmZXRjaFdlYXRoZXIoKSlcbiAgfSwgW10pXG5cbiAgaWYgKGxvYWRpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjc3M9e2xvYWRpbmdTdHlsZXN9PlxuICAgICAgICA8c3Bhbj5Mb2FkaW5nIHdlYXRoZXIgZGF0YS4uLjwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNzcz17ZXJyb3JTdHlsZXN9PlxuICAgICAgICA8c3Bhbj57ZXJyb3J9PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU2VsZWN0SXRlbShldmVudCkge1xuICAgIGRpc3BhdGNoKHNlbGVjdFdlYXRoZXJJdGVtKGV2ZW50LnJvd0RhdGEpKVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJTZWxlY3RlZEl0ZW0oKSB7XG4gICAgZGlzcGF0Y2goc2VsZWN0V2VhdGhlckl0ZW0obnVsbCkpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXtjb250YWluZXJ9PlxuICAgICAgPGRpdiBjc3M9e2hlYWRlcn0+XG4gICAgICAgIDxoMj5cbiAgICAgICAgICB7Y2l0eS5uYW1lfSwge2NpdHkuY291bnRyeX1cbiAgICAgICAgPC9oMj5cbiAgICAgIDwvZGl2PlxuICAgICAge3NlbGVjdGVkICYmIChcbiAgICAgICAgPGRpdiBjc3M9e3N1YmhlYWRlcn0+XG4gICAgICAgICAge3NlbGVjdGVkLmR0X3R4dC5zdWJzdHIoMCwgMTYpfSA8QnV0dG9uIG9uQ2xpY2s9e2NsZWFyU2VsZWN0ZWRJdGVtfT5SZXR1cm48L0J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAgPGRpdiBjc3M9e3RhYmxlfT5cbiAgICAgICAge3NlbGVjdGVkID8gKFxuICAgICAgICAgIDxXZWF0aGVySXRlbVRhYmxlIGl0ZW09e3NlbGVjdGVkfSAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxXZWF0aGVyVGFibGUgb25TZWxlY3Q9e2hhbmRsZVNlbGVjdEl0ZW19IHdlYXRoZXI9e3dlYXRoZXJ9IC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+ICh7XG4gIHdlYXRoZXI6IHN0YXRlLndlYXRoZXIsXG59KVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoV2VhdGhlclZpZXcpXG4iLCIvKiogQGpzeCBqc3ggKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQge2NzcywgR2xvYmFsLCBqc3h9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5cbmltcG9ydCBFcnJvckJvdW5kYXJ5IGZyb20gJy4vY29tcG9uZW50cy9FcnJvckJvdW5kYXJ5J1xuaW1wb3J0IFdlYXRoZXJWaWV3IGZyb20gJy4vY29tcG9uZW50cy9XZWF0aGVyVmlldydcblxuY29uc3QgZ2xvYmFsU3R5bGVzID0gY3NzYFxuICBodG1sLFxuICBib2R5LFxuICAjcm9vdCB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG5cbiAgKixcbiAgKjo6YmVmb3JlLFxuICAqOjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuXG4gIGJvZHkge1xuICAgIGZvbnQtZmFtaWx5OiBDaXJjdWxhciwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGNvbG9yOiB2YXIoLS1mb250LWNvbG9yKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10ZXJ0aWFyeS1jb2xvcik7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gIH1cblxuICAuZXZlblJvdyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgfVxuICAub2RkUm93IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBlZmVmO1xuICB9XG5gXG5cbmNvbnN0IEFwcFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBtaW4taGVpZ2h0OiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCgpIHtcbiAgcmV0dXJuIChcbiAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtnbG9iYWxTdHlsZXN9IC8+XG4gICAgICA8QXBwV3JhcHBlcj5cbiAgICAgICAgPFdlYXRoZXJWaWV3IC8+XG4gICAgICA8L0FwcFdyYXBwZXI+XG4gICAgPC9FcnJvckJvdW5kYXJ5PlxuICApXG59XG4iLCJpbXBvcnQge1xuICBGRVRDSF9XRUFUSEVSX0JFR0lOLFxuICBGRVRDSF9XRUFUSEVSX1NVQ0NFU1MsXG4gIEZFVENIX1dFQVRIRVJfRkFJTFVSRSxcbiAgU0VMRUNUX1dFQVRIRVJfSVRFTSxcbn0gZnJvbSAnLi4vYWN0aW9ucy93ZWF0aGVyJ1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBjaXR5OiB7fSxcbiAgbGlzdDogW10sXG4gIGxvYWRpbmc6IGZhbHNlLFxuICBlcnJvcjogbnVsbCxcbiAgc2VsZWN0ZWQ6IG51bGwsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdlYXRoZXJSZWR1Y2VyKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRkVUQ0hfV0VBVEhFUl9CRUdJTjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgIH1cblxuICAgIGNhc2UgRkVUQ0hfV0VBVEhFUl9TVUNDRVNTOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBjaXR5OiBhY3Rpb24ucGF5bG9hZC5jaXR5LFxuICAgICAgICBsaXN0OiBhY3Rpb24ucGF5bG9hZC5saXN0LFxuICAgICAgfVxuXG4gICAgY2FzZSBGRVRDSF9XRUFUSEVSX0ZBSUxVUkU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgIGVycm9yOiBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgY2l0eToge30sXG4gICAgICAgIGxpc3Q6IFtdLFxuICAgICAgfVxuXG4gICAgY2FzZSBTRUxFQ1RfV0VBVEhFUl9JVEVNOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNlbGVjdGVkOiBhY3Rpb24ucGF5bG9hZCxcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgfVxufVxuIiwiaW1wb3J0IHtjb21iaW5lUmVkdWNlcnN9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHdlYXRoZXIgZnJvbSAnLi93ZWF0aGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lUmVkdWNlcnMoe1xuICB3ZWF0aGVyLFxufSlcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQge2NyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2V9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnXG5pbXBvcnQgJ3JlYWN0LXZpcnR1YWxpemVkL3N0eWxlcy5jc3MnXG5cbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi9yZWR1Y2VycydcblxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgcm9vdFJlZHVjZXIsXG4gIGNvbXBvc2UoXG4gICAgYXBwbHlNaWRkbGV3YXJlKHRodW5rKSxcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fXG4gICAgICA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fKClcbiAgICAgIDogKG5vb3ApID0+IG5vb3AsXG4gICksXG4pXG5cblJlYWN0RE9NLnJlbmRlcihcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPEFwcCAvPlxuICA8L1Byb3ZpZGVyPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSxcbilcbiJdLCJzb3VyY2VSb290IjoiIn0=