!function(e){function t(t){for(var n,i,c=t[0],l=t[1],d=t[2],f=0,b=[];f<c.length;f++)i=c[f],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&b.push(a[i][0]),a[i]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(u&&u(t);b.length;)b.shift()();return o.push.apply(o,d||[]),r()}function r(){for(var e,t=0;t<o.length;t++){for(var r=o[t],n=!0,c=1;c<r.length;c++){var l=r[c];0!==a[l]&&(n=!1)}n&&(o.splice(t--,1),e=i(i.s=r[0]))}return e}var n={},a={0:0},o=[];function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=n,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var d=0;d<c.length;d++)t(c[d]);var u=l;o.push([165,1]),r()}({165:function(e,t,r){"use strict";r.r(t);var n=r(0),a=r.n(n),o=r(15),i=r.n(o),c=r(23),l=r(45),d=r(88),u=(r(103),r(46)),f=r(1);class b extends a.a.Component{constructor(e){super(e),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0}}componentDidCatch(e,t){}render(){return this.state.hasError?Object(f.d)("h1",null,"Something went wrong."):this.props.children}}function s(e,t,r,n,a,o,i){try{var c=e[o](i),l=c.value}catch(e){return void r(e)}c.done?t(l):Promise.resolve(l).then(n,a)}var h=e=>({type:"FETCH_WEATHER_FAILURE",payload:e}),p=e=>({type:"SELECT_WEATHER_ITEM",payload:e}),w=()=>function(){var e,t=(e=function*(e){try{e({type:"FETCH_WEATHER_BEGIN"});var t=yield fetch("http://api.openweathermap.org/data/2.5/forecast?id=".concat("2643743","&appid=").concat("416f21735638892910fc788dbd92dc24")),r=yield t.json();if(r.cod&&"200"!==r.cod)return e(h(r.message));e((e=>({type:"FETCH_WEATHER_SUCCESS",payload:e}))(r))}catch(t){console.error(t),e(h("Error fetching weather data. Please try again later"))}},function(){var t=this,r=arguments;return new Promise((function(n,a){var o=e.apply(t,r);function i(e){s(o,n,a,i,c,"next",e)}function c(e){s(o,n,a,i,c,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),v=r(9);function O(e){var{index:t}=e;return t<0?"headerRow":t%2==0?"evenRow":"oddRow"}var y=e=>{var{onSelect:t,weather:r}=e;return Object(f.d)(v.a,null,e=>{var{height:n,width:a}=e;return Object(f.d)(v.c,{width:Math.max(1570,a),height:n,headerHeight:40,rowHeight:30,rowCount:r.list.length,rowGetter:e=>{var{index:t}=e;return r.list[t]},rowClassName:O,onRowClick:t},Object(f.d)(v.b,{label:"Date",dataKey:"dt_txt",width:200,flexGrow:1}),Object(f.d)(v.b,{width:110,label:"Visibility",dataKey:"visibility",flexGrow:1}),Object(f.d)(v.b,{width:100,label:"Wind",dataKey:"wind",cellDataGetter:e=>{var{rowData:t}=e;return t.wind.speed+" / "+t.wind.deg},flexGrow:1}),Object(f.d)(v.b,{width:100,label:"Clouds",dataKey:"clouds",cellDataGetter:e=>{var{rowData:t}=e;return t.clouds.all},flexGrow:1}),Object(f.d)(v.b,{width:100,label:"Rain",dataKey:"rain",cellDataGetter:e=>{var{rowData:t}=e;return t.rain&&t.rain["3h"]},flexGrow:1}),Object(f.d)(v.b,{width:120,label:"Feels like",dataKey:"feels_like",cellDataGetter:e=>{var{rowData:t}=e;return t.main.feels_like},flexGrow:1}),Object(f.d)(v.b,{width:140,label:"Grnd Level",dataKey:"grnd_level",cellDataGetter:e=>{var{rowData:t}=e;return t.main.grnd_level},flexGrow:1}),Object(f.d)(v.b,{width:120,label:"Humidity",dataKey:"humidity",cellDataGetter:e=>{var{rowData:t}=e;return t.main.humidity},flexGrow:1}),Object(f.d)(v.b,{width:120,label:"Pressure",dataKey:"pressure",cellDataGetter:e=>{var{rowData:t}=e;return t.main.pressure},flexGrow:1}),Object(f.d)(v.b,{width:120,label:"Sea Level",dataKey:"sea_level",cellDataGetter:e=>{var{rowData:t}=e;return t.main.sea_level},flexGrow:1}),Object(f.d)(v.b,{width:120,label:"Temp",dataKey:"temp",cellDataGetter:e=>{var{rowData:t}=e;return t.main.temp},flexGrow:1}),Object(f.d)(v.b,{width:120,label:"Temp min",dataKey:"temp_min",cellDataGetter:e=>{var{rowData:t}=e;return t.main.temp_min},flexGrow:1}),Object(f.d)(v.b,{width:120,label:"Temp max",dataKey:"temp_max",cellDataGetter:e=>{var{rowData:t}=e;return t.main.temp_max},flexGrow:1}))})};function j(e){var{index:t}=e;return t<0?"headerRow":t%2==0?"evenRow":"oddRow"}var m=e=>{var{item:t}=e;return Object(f.d)(a.a.Fragment,null,Object(f.d)(v.a,null,e=>{var{height:r,width:n}=e;return Object(f.d)(v.c,{width:Math.max(550,n),height:r,headerHeight:40,rowHeight:30,rowCount:t.weather.length,rowGetter:e=>{var{index:r}=e;return t.weather[r]},rowClassName:j},Object(f.d)(v.b,{label:"Main",dataKey:"main",width:150}),Object(f.d)(v.b,{width:200,label:"Description",dataKey:"description",flexGrow:1}),Object(f.d)(v.b,{width:200,label:"Icon",dataKey:"icon"}))}))};function g(){var e=S(["\n  display: inline-block;\n  text-align: center;\n\n  min-width: 70px;\n  padding: 0.5em 1.125em;\n  margin-left: 2em;\n\n  background-color: #0087ff;\n  border-color: #0060ff;\n  color: #fff;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n  &:active {\n    background-color: #0060ff;\n  }\n"]);return g=function(){return e},e}function E(){var e=S(["\n  ","\n  color: red;\n"]);return E=function(){return e},e}function x(){var e=S(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  span {\n    display: inline-block;\n    max-width: 500px;\n  }\n"]);return x=function(){return e},e}function _(){var e=S(["\n  overflow: auto;\n  height: 100%;\n  padding: 2em;\n"]);return _=function(){return e},e}function D(){var e=S(["\n  padding: 1em 2em;\n  box-shadow: inset 0 -1px 0 #e1e4e8;\n"]);return D=function(){return e},e}function G(){var e=S(["\n  padding: calc(2em + 10px);\n  background-color: #fafbfc;\n  box-shadow: inset 0 -1px 0 #e1e4e8;\n"]);return G=function(){return e},e}function T(){var e=S(["\n  height: 80%;\n  width: 100%;\n"]);return T=function(){return e},e}function S(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var R=Object(f.c)(T()),C=Object(f.c)(G()),P=Object(f.c)(D()),H=Object(f.c)(_()),k=Object(f.c)(x()),K=Object(f.c)(E(),k),A=u.a.a(g()),F=Object(l.b)(e=>({weather:e.weather}))(e=>{var{dispatch:t,weather:r}=e,{loading:n,city:o,selected:i,error:c}=r;if(a.a.useEffect(()=>{t(w())},[]),n)return Object(f.d)("div",{css:k},Object(f.d)("span",null,"Loading weather data..."));if(c)return Object(f.d)("div",{css:K},Object(f.d)("span",null,c));return Object(f.d)("div",{css:R},Object(f.d)("div",{css:C},Object(f.d)("h2",null,o.name,", ",o.country)),i&&Object(f.d)("div",{css:P},i.dt_txt," ",Object(f.d)(A,{onClick:function(){t(p(null))}},"Return")),Object(f.d)("div",{css:H},i?Object(f.d)(m,{item:i}):Object(f.d)(y,{onSelect:function(e){t(p(e.rowData))},weather:r})))});function I(){var e=M(["\n  min-height: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n"]);return I=function(){return e},e}function L(){var e=M(["\n  html,\n  body,\n  #root {\n    height: 100%;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: Circular, Arial, sans-serif;\n    font-size: 18px;\n    color: var(--font-color);\n    background-color: var(--tertiary-color);\n    padding: 0;\n    margin: 0;\n  }\n\n  .evenRow {\n    background-color: #fff;\n  }\n  .oddRow {\n    background-color: #f0efef;\n  }\n"]);return L=function(){return e},e}function M(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var W=Object(f.c)(L()),N=u.a.div(I());function z(){return Object(f.d)(b,null,Object(f.d)(f.a,{styles:W}),Object(f.d)(N,null,Object(f.d)(F,null)))}function U(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function X(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?U(Object(r),!0).forEach((function(t){B(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):U(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function B(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var V={city:{},list:[],loading:!1,error:null,selected:null};var J=Object(c.c)({weather:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:V,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"FETCH_WEATHER_BEGIN":return X(X({},e),{},{loading:!0,error:null});case"FETCH_WEATHER_SUCCESS":return X(X({},e),{},{loading:!1,city:t.payload.city,list:t.payload.list});case"FETCH_WEATHER_FAILURE":return X(X({},e),{},{loading:!1,error:t.payload,city:{},list:[]});case"SELECT_WEATHER_ITEM":return X(X({},e),{},{selected:t.payload});default:return e}}}),q=Object(c.e)(J,Object(c.d)(Object(c.a)(d.a),window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__():e=>e));i.a.render(a.a.createElement(l.a,{store:q},a.a.createElement(z,null)),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,